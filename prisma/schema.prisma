// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  MASKAPAI
}

enum Status {
  Pending
  Confirmed
  Canceled
}

model tbl_user {
  id Int @id @default(autoincrement())
  uuid String @unique @default(uuid())
  username String @unique
  name String @db.VarChar(100)
  email String @unique
  password String @db.VarChar(255)
  role Role @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relasi one-to-one dengan tbl_airlines
  airlines tbl_airlines?

  // relasi one-to-many
  bookings tbl_bookings[]

  // relasi one-to-many
  notifications tbl_notifications[]
}

model tbl_airlines {
  id Int @id @default(autoincrement())
  uuid String @unique @default(uuid())
  name String @db.VarChar(100)
  logo String @db.VarChar(255)
  userId Int @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relasi one-to-one dengan tbl_user
  user tbl_user @relation(fields: [userId], references: [id])

  // relasi one-to-many dengan tbl_flights = 1 airlines dapat memiliki banyak flights
  flights tbl_flights[]
}

model tbl_flights {
  id Int @id @default(autoincrement())
  uuid String @unique @default(uuid())
  no_penerbangan String
  kota_keberangkatan String
  kota_tujuan String
  waktu_keberangkatan DateTime
  waktu_kedatangan DateTime
  harga Decimal @db.Decimal(10, 2)
  kapasitas_kursi Int
  kursi_tersedia Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relasi one-to-many dengan tbl_bookings
  bookings tbl_bookings[]

  // relasi one-to-many dengan tbl_airlines
  airlinesId Int
  airlines tbl_airlines @relation(fields: [airlinesId], references: [id])
}

model tbl_bookings {
  id Int @id @default(autoincrement())
  jumlah_kursi Int
  total_harga Decimal @db.Decimal(10, 2)
  status Status @default(Pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // one-to-one dengan tbl_bookings
  payments tbl_payments?

  // relasi one-to-many dengan tbl_flights
  flightId Int
  flight tbl_flights @relation(fields: [flightId], references: [id])

  // relasi one-to-many dengan tbl_user
  userId Int
  user tbl_user @relation(fields: [userId], references: [id])
}

model tbl_payments {
  id String @id @default(uuid())
  payment_method String
  jumlah_pembayaran Decimal @db.Decimal(10, 2)
  status Status @default(Pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relasi one-to-one dengan tbl_bookings
  bookingId Int @unique
  booking tbl_bookings @relation(fields: [bookingId], references: [id])
}

model tbl_notifications {
  id Int @id @default(autoincrement())
  userId Int @unique
  message String
  isRead Boolean @default(false)
  createdAt DateTime @default(now())

  // relasi one-to-many
  user tbl_user @relation(fields: [userId], references: [id])
}